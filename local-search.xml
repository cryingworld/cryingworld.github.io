<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>systemd condition* 用法</title>
    <link href="/2025/05/14/systemd-condition-%E7%94%A8%E6%B3%95/"/>
    <url>/2025/05/14/systemd-condition-%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在 systemd 服务单元文件中，你可以使用 Condition 指令来添加判断条件，这些条件会在服务启动之前被检查。如果条件为 true，则服务会继续启动；如果条件为 false，则服务不会启动。</p><p>以下是一些常用的 Condition 指令：</p><p>ConditionPathExists: 检查指定路径是否存在。</p><p>[Unit]<br>ConditionPathExists&#x3D;&#x2F;path&#x2F;to&#x2F;directory<br>ConditionPathIsDirectory: 检查指定路径是否为目录。</p><p>[Unit]<br>ConditionPathIsDirectory&#x3D;&#x2F;path&#x2F;to&#x2F;directory<br>ConditionPathIsSymbolicLink: 检查指定路径是否为符号链接。</p><p>[Unit]<br>ConditionPathIsSymbolicLink&#x3D;&#x2F;path&#x2F;to&#x2F;symlink<br>ConditionFileIsExecutable: 检查指定文件是否为可执行文件。</p><p>[Unit]<br>ConditionFileIsExecutable&#x3D;&#x2F;path&#x2F;to&#x2F;executable<br>ConditionFileNotEmpty: 检查指定文件是否非空。</p><p>[Unit]<br>ConditionFileNotEmpty&#x3D;&#x2F;path&#x2F;to&#x2F;file<br>ConditionDirectoryNotEmpty: 检查指定目录是否非空。</p><p>[Unit]<br>ConditionDirectoryNotEmpty&#x3D;&#x2F;path&#x2F;to&#x2F;directory<br>ConditionVirtualization: 检查系统是否运行在虚拟化环境中。</p><p>[Unit]<br>ConditionVirtualization&#x3D;<br>ConditionKernelVersion: 检查内核版本。</p><p>[Service]<br>ConditionKernelVersion&#x3D;3.10.0<br>ConditionArchitecture: 检查系统架构。</p><p>[Unit]<br>ConditionArchitecture&#x3D;x86-64<br>ConditionCapability: 检查服务是否具备特定的 Linux 能力。</p><p>[Unit]<br>ConditionCapability&#x3D;CAP_SYS_ADMIN<br>ConditionSecurity: 检查 SELinux 状态。</p><p>[Unit]<br>ConditionSecurity&#x3D;selinux</p>]]></content>
    
    
    <categories>
      
      <category>Systemd</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础</title>
    <link href="/2025/05/14/Docker%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/14/Docker%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>应用场景<br>Web 应用的自动化打包和发布。<br>自动化测试和持续集成、发布。<br>在服务型环境中部署和调整数据库或其他的后台应用。<br>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS (提供公共的中间件、数据库、缓存等，减少公司维护成本和安全风险，专注业务应用程序的实现。)环境。</p><p>Docker三个基本概念<br>1）image镜像<br>docker镜像就是一个只读模板，比如，一个镜像可以包含一个完整的centos，里面仅安装apache或用户的其他应用，镜像可以用来创建docker容器，另外docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下一个已经做好的镜像来直接使用<br>2）container容器<br>docker利用容器来运行应用，容器是从镜像创建的运行实例，它可以被启动，开始、停止、删除、每个容器都是互相隔离的，保证安全的平台，可以吧容器看做是要给简易版的linux环境（包括root用户权限、镜像空间、用户空间和网络空间等）和运行再其中的应用程序<br>3）repostory仓库<br>仓库是集中存储镜像文件的仓库，registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。<br>Docker架构<br>docker daemon就是docker的守护进程即server端，可以是远程的，也可以是本地的<br>docker cli 用来管理容器和镜像，客户端提供一个只读镜像，然后通过镜像可以创建多个容器</p><p>Docker安装、启动<br>CE为社区版，EE为企业版<br>yum list | grep docker<br>docker-ce.x86_64                                                  3:20.10.0-3.el8                                        Thirdpart<br>docker-ce-cli.x86_64                                              1:20.10.0-3.el8                                        Thirdpart<br>docker-ce-rootless-extras.x86_64                                  20.10.0-3.el8                                          Thirdpart<br>pcp-pmda-docker.x86_64                                            5.2.5-4.el8                                            Base<br>podman-docker.noarch                                              3.2.3-0.11.el8                                         Base<br>python-docker-tests.noarch                                        5.0.0-2.el8                                            Base<br>python2-dockerpty.noarch                                          0.4.1-18.el8                                           Base<br>python3-docker.noarch                                             5.0.0-2.el8                                            Base<br>python3-dockerpty.noarch                                          0.4.1-18.el8                                           Base<br>standard-test-roles-inventory-docker.noarch                       4.10-1.el8                                             Base       </p><h1 id="yum会安装docker依赖"><a href="#yum会安装docker依赖" class="headerlink" title="yum会安装docker依赖"></a>yum会安装docker依赖</h1><p>yum install docker-ce.x86_64</p><p>yum install docker-ce.x86_64<br>                                                                                              10&#x2F;10<br>Installed products updated.</p><p>已安装:<br>  container-selinux-2:2.158.0-1.el8.noarch        containerd.io-1.4.3-3.1.el8.x86_64  docker-ce-3:20.10.0-3.el8.x86_64  docker-ce-cli-1:20.10.0-3.el8.x86_64<br>  docker-ce-rootless-extras-20.10.0-3.el8.x86_64  fuse-overlayfs-1.6-1.el8.x86_64     fuse3-3.2.1-12.el8.x86_64         fuse3-libs-3.2.1-12.el8.x86_64<br>  libslirp-4.3.1-1.el8.x86_64                     slirp4netns-1.1.8-1.el8.x86_64   </p><p>启动docker服务<br>systemctl start docker</p><p>常用Docker命令<br>1、docker ps -a 查看所有容器<br>docker ps -a<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</p><p>CONTAINER ID:容器的ID<br>IMAGE:使用的镜像<br>COMMAND:启动容器时运行的命令<br>CREATED:容器创建的时间<br>STATUS:容器的状态<br>    created：已创建<br>    restarting：重启中<br>    running：运行中<br>    removing：迁移中<br>    paused：暂停<br>    exited：停止<br>    dead：死亡<br>PORTS:实际运行端口，若有指定运行端口则会显示指定的端口和默认运行端口，以及连接类型（ tcp &#x2F; udp ）<br>NAMES:容器名字</p><p>docker ps -l查看最后一次创建的容器<br>2、docker pull image_name 下载docker镜像<br>docker pull hello-world<br>Using default tag: latest</p><p>#下载指定版本镜像可以使用如下命令<br>docker pull mysql:8.0<br>docker run -it mysql:8.0 mysql -V<br>mysql  Ver 8.0.36 for Linux on x86_64 (MySQL Community Server - GPL)</p><p>docker pull mysql:5.7<br>docker run -it mysql:5.7 mysql -V<br>mysql  Ver 14.14 Distrib 5.7.44, for Linux (x86_64) using  EditLine wrapper</p><h1 id="如下命令删除docker镜像"><a href="#如下命令删除docker镜像" class="headerlink" title="如下命令删除docker镜像"></a>如下命令删除docker镜像</h1><p>docker rmi image_name<br>3、docker imags 查看所有镜像<br>docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>ubuntu        latest    3db8720ecbf5   12 days ago    77.9MB<br>hello-world   latest    d2c94e258dcb   9 months ago   13.3kB<br>4、docker run 启动镜像<br>docker run -it ubuntu &#x2F;bin&#x2F;bash # -i:交互式操作 -t:终端 ubuntu为镜像，&#x2F;bin&#x2F;bash是命令<br>root@e518c1b19385:&#x2F;# uname -a<br>Linux e518c1b19385 4.19.112-2.el8.x86_64 #1 SMP Wed Jun 10 09:04:49 EDT 2020 x86_64 x86_64 x86_64 GNU&#x2F;Linux<br>root@e518c1b19385:&#x2F;# exit<br>exit  # 使用exit退出容器</p><p>docker ps -a<br>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                     PORTS     NAMES<br>e518c1b19385   ubuntu    “&#x2F;bin&#x2F;bash”   11 seconds ago   Exited (0) 3 seconds ago             busy_carver</p><h1 id="这里容器已经退出，可以使用如下命令启动容器"><a href="#这里容器已经退出，可以使用如下命令启动容器" class="headerlink" title="这里容器已经退出，可以使用如下命令启动容器"></a>这里容器已经退出，可以使用如下命令启动容器</h1><p>docker start container_id<br>建议暂停后容器docker stop container_id后使用docker start container_id启动容器<br>正在运行的容器可以使用docker restart container_id重启</p><p>docker start … 包含容器文件系统挂载的操作<br>docker stop … 包含容器文件系统卸载的操作<br>docker restart … 不包含容器文件系统的卸载与挂载操作，本质上docker restart不涉及文件系统的操作，因此restart命令并不是stop与start两个命令的顺序叠加。</p><p>docker run -itd ubuntu &#x2F;bin&#x2F;bash # -d参数后台运行容器<br>8f0895d80f5133bedba6e4ea23233cae923ee898ca135a4ced849dc06f1a19f3<br>docker ps -a<br>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES<br>8f0895d80f51   ubuntu    “&#x2F;bin&#x2F;bash”   6 seconds ago    Up 5 seconds                          beautiful_sanderson</p><p>在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：<br>docker attach<br>docker exec：推荐大家使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止</p><p>docker ps<br>CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES<br>8f0895d80f51   ubuntu    “&#x2F;bin&#x2F;bash”   28 hours ago   Up 28 hours             beautiful_sanderson<br>docker attach 8f0895d80f51<br>root@8f0895d80f51:&#x2F;# exit<br>exit<br>docker ps -a<br>CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS                      PORTS     NAMES<br>8f0895d80f51   ubuntu    “&#x2F;bin&#x2F;bash”   28 hours ago   Exited (0) 3 seconds ago              beautiful_sanderson<br>e518c1b19385   ubuntu    “&#x2F;bin&#x2F;bash”   28 hours ago   Exited (137) 28 hours ago             busy_carver</p><p>docker exec -it 8f0895d80f51 &#x2F;bin&#x2F;bash<br>root@8f0895d80f51:&#x2F;# exit<br>exit<br>docker ps -a<br>CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS                      PORTS     NAMES<br>8f0895d80f51   ubuntu    “&#x2F;bin&#x2F;bash”   28 hours ago   Up About a minute                     beautiful_sanderson<br>e518c1b19385   ubuntu    “&#x2F;bin&#x2F;bash”   28 hours ago   Exited (137) 28 hours ago             busy_carver<br>5、docker导出容器<br>docker ps -a<br>CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS                      PORTS     NAMES<br>8f0895d80f51   ubuntu    “&#x2F;bin&#x2F;bash”   28 hours ago   Up 13 minutes                         beautiful_sanderson<br>e518c1b19385   ubuntu    “&#x2F;bin&#x2F;bash”   29 hours ago   Exited (137) 28 hours ago             busy_carver</p><p>docker export e518c1b19385 &gt; ubuntu.tar<br>cat ubuntu.tar | docker import - test_ubuntu<br>sha256:56d84bf3d48c4ce27deb2528bd7d3bc958bc683617f0c830796a5a1a55862c30</p><p>docker images<br>REPOSITORY           TAG       IMAGE ID       CREATED         SIZE<br>test_ubuntu          latest    56d84bf3d48c   7 seconds ago   77.9MB<br>ubuntu               latest    3db8720ecbf5   2 weeks ago     77.9MB<br>mysql                8.0       7e6df4470869   5 weeks ago     603MB<br>mysql                5.7       5107333e08a8   2 months ago    501MB<br>hello-world          latest    d2c94e258dcb   10 months ago   13.3kB<br>mysql&#x2F;mysql-server   latest    1d9c2219ff69   13 months ago   496MB<br>centos               latest    5d0da3dc9764   2 years ago     231MB<br>6、docker删除容器<br>docker rm -f container_id</p><h1 id="如下命令可以清楚所有处于终止状态的容器"><a href="#如下命令可以清楚所有处于终止状态的容器" class="headerlink" title="如下命令可以清楚所有处于终止状态的容器"></a>如下命令可以清楚所有处于终止状态的容器</h1><p>docker container prune<br>7、Dockerfile定制镜像<br>cat Dockerfile<br>FROM nginx<br>RUN echo ‘这是一个本地构建的nginx镜像’ &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</p><p>docker build -t nginx:v3 . # 这里不能直接指向Dockerfile，只能指向Dockerfile所在的目录。<br>Sending build context to Docker daemon  2.048kB<br>Step 1&#x2F;2 : FROM nginx<br> —&gt; e4720093a3c1<br>Step 2&#x2F;2 : RUN echo ‘这是一个本地构建的nginx镜像’ &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html<br> —&gt; Running in a26691397323<br>Removing intermediate container a26691397323<br> —&gt; 51193a0707ac<br>Successfully built 51193a0707ac<br>Successfully tagged nginx:v3</p><p>docker images<br>REPOSITORY           TAG       IMAGE ID       CREATED         SIZE<br>nginx                v3        51193a0707ac   9 minutes ago   187MB<br>test_ubuntu          latest    56d84bf3d48c   19 hours ago    77.9MB<br>nginx                latest    e4720093a3c1   2 weeks ago     187MB<br>ubuntu               latest    3db8720ecbf5   2 weeks ago     77.9MB<br>mysql                8.0       7e6df4470869   5 weeks ago     603MB<br>mysql                5.7       5107333e08a8   2 months ago    501MB<br>hello-world          latest    d2c94e258dcb   10 months ago   13.3kB<br>mysql&#x2F;mysql-server   latest    1d9c2219ff69   13 months ago   496MB<br>centos               latest    5d0da3dc9764   2 years ago     231MB</p><p>docker run -it nginx:v3 &#x2F;bin&#x2F;bash<br>root@8dcf606c3e70:&#x2F;# cat usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html<br>这是一个本地构建的nginx镜像<br>8、docker导出镜像<br>docker save nginx &gt;&#x2F;tmp&#x2F;nginx.tar.gz<br>docker load &lt;&#x2F;tmp&#x2F;nginx.tar.gz</p><p>1.docker save保存的是镜像，docker export保存的是容器<br>2.docker save会保留镜像所有的历史记录，docker export不会，即没有commit历史<br>3.docker load用来载入镜像包，docker import用来载入容器包，但两者都会恢复为镜像；<br>4.docker load不能对载入的镜像重命名，而docker import可以为镜像指定新名称。<br>9、docker运行一个web应用<br>docker pull training&#x2F;webapp<br>Using default tag: latest<br>latest: Pulling from training&#x2F;webapp<br>Image docker.io&#x2F;training&#x2F;webapp:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image for better future compatibility. More information at <a href="https://docs.docker.com/registry/spec/deprecated-schema-v1/">https://docs.docker.com/registry/spec/deprecated-schema-v1/</a><br>e190868d63f8: Pull complete<br>909cd34c6fd7: Pull complete<br>0b9bfabab7c1: Pull complete<br>a3ed95caeb02: Pull complete<br>10bbbc0fc0ff: Pull complete<br>fca59b508e9f: Pull complete<br>e7ae2541b15b: Pull complete<br>9dd97ef58ce9: Pull complete<br>a4c1b0cb7af7: Pull complete<br>Digest: sha256:06e9c1983bd6d5db5fba376ccd63bfa529e8d02f23d5079b8f74a616308fb11d<br>Status: Downloaded newer image for training&#x2F;webapp:latest<br>docker.io&#x2F;training&#x2F;webapp:latest</p><p>docker run -d -P training&#x2F;webapp python app.py # -P:将容器内部使用的网络端口随机映射到我们使用的主机上。-p可以指定容器内部端口绑定到指定的主机端口<br>docker run -d -p 127.0.0.1:5001:5000 training&#x2F;webapp python app.py<br>docker ps -a<br>CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS                      PORTS                     NAMES<br>557db7300f09   training&#x2F;webapp   “python app.py”          8 seconds ago   Up 5 seconds                0.0.0.0:49153-&gt;5000&#x2F;tcp   xenodochial_varahamihira<br>8f1f0fcc1b82   training&#x2F;webapp   “python app.py”          About a minute ago   Up About a minute            127.0.0.1:5001-&gt;5000&#x2F;tcp   serene_hermann</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>yocto基础</title>
    <link href="/2025/05/14/yocto%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/14/yocto%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Yocto环境配置和Linux开发环境配置<br>yocto：一个能够让开发这制作自定义Linux镜像的项目<br>OpenEmbedded：包含核心元数据层和BitBake构建工具，BitBake是任务执行程序和调度程序，它是OpenEmbedded构建系统的核心。<br>OpenEmbedded-Core（OE-Core）元数据，其中包括共享配置，全局变量定义，共享类，包装和配方。其中，类定义了构建逻辑的封装和继承。配方是要构建的软件和图像的逻辑单元<br>Poky：既是Yocto的构建示例也是一套构建工具，Poky是位于OE-Core之上的集成层。<br>meta-poky，这是特定于Poky的元数据。<br>meta-yocto-bsp，这是Yocto项目特定的basic支持包(BSP)<br>BitBake：通用的任务执行引擎，允许shell和python任务在复杂的任务间相关性约束内高效且并行的运行。其主要用户之一OpenEmbedded以此内核为基础，并使用面向任务的方法构建嵌入式Linux软件堆栈<br>BitBake根据提供的构成任务的元数据执行任务：元数据存储在配方（.bb）和相关的配方“追加”（.bbappend）文件，配置（.conf）和基础包含（.inc）文件以及类（.bbclass）文件中。<br>元数据向BitBake提供有关要运行哪些任务以及这些任务之间的依赖关系的说明<br>BitBake包含一个提取程序库，用于从各个地方(本地文件，源代码控制系统或网站)获取源代码<br>每个要构建的单元的指令（例如，一个软件）被称为“配方”文件，其中包含有关该单元的所有信息（依赖项，源文件位置，校验和，描述等）<br>BitBake包括客户端&#x2F;服务器抽象，可以从命令行使用，也可以通过XML-RPC用作服务，并且具有多个不同的用户界面<br>yocto的工作流程<br>了解Yocto Project工作流非常重要，因为它可以帮助您查明发生问题的位置以及构建的中断方式。 工作流分为以下步骤：<br>开发人员指定架构，策略，补丁和配置详细信息。<br>构建系统从指定的位置获取并下载源代码。该项目支持标准方法（例如tarball）或源代码存储库系统（例如git）。<br>将源提取到本地工作区中，在该工作区中将应用补丁，并且将运行用于配置和编译软件的常见步骤。<br>将软件安装到临时暂存区域，在该区域中，您选择的二进制软件包格式（deb，rpm或ipk）将用于汇总软件。<br>在整个构建过程中都会运行不同的质量检查和健全性检查。<br>创建二进制文件后，将生成二进制程序包提要，然后将其用于创建最终的根文件映像。<br>生成文件系统映像<br>yocto相关术语：<br>配置文件：包含全局定义变量，用户定义变量和硬件配置信息。<br>配置文件告诉构建系统需要构建什么，什么需要放入镜像，以支持哪个特定平台<br>配方Recipe：<br>Recipe可以包含一列用来构建二进制镜像文件的设定和任务（指令）。<br>Recipe描述了你从哪获取代码，需要应用哪个（代码）补丁。同时Recipe还描述了对于其他Recipe或库的依赖，以及配置和编译选项。Recipe存放在Layer中<br>层Layer：相关Recipe的集合<br>Layer允许你将元数据（metadata）集合在一起，自定义你的构建。有时候你的构建是可以支持多种不同架构的，那么这种数据，可以通过Layer方式将它们独立出来<br>元数据Metadata：Yocto Project在构建Linux发行版本时，构建系统会解析的文件（数据），Metadata是Yocto Project中很关键的一个元素。通常来说，元数据包含recipe，配置文件，，其他参考构建指令的信息，以及控制构建什么&#x2F;如何构建（what and how）的数据。元数据也包括命令（command），软件版本信息，从何处获取，其他用来做补丁的文件或是特定场景下需要自定义软件的信息。OpenEmbedded Core是重要的一组被验证过的元数据<br>OpenEmbedded-Core：OE-Core是基础recipe，类文件，和相关文件的元数据组合，在基于OpenEmbedded的系统中很常用，Yocto Project也使用它。OE-Core由OpenEmbedded社区将其开发的原始仓库取其核心，充分验证过的recipe的集合而形成的关键核心<br>Poky：一个参考嵌入式发行版本，同样也用来作为提供基本功能的发行，可以用来说明（学习）如何自定义发行版本，可以测试Yocto Project组件，还可以为用户下载Yocto Project。 Poky不是产品级的，但它是一个很好的定制化工作起点。Poky是在OE-Core上层的一个Layer集成<br>构建系统BitBake：调度表和执行引擎，用来解析指令（recipe）和配置数据 然后它创建依赖树，安排编译，调度编译，最后执行定制化Linux镜像&#x2F;发行版本的构建。BitBake是类似Make的一个构建工具。BitBake recipe指定一个特定包是如何被构建的，包括所有包的依赖，源代码路径，配置，编译，构建，安装，和移除指令。Recipe也在标准变量中存储包的元数据。相关Recipe形成一个Layer。构建过程中，追踪依赖，执行编译或交叉编译。作为交叉构建的第一步，矿界首先创建适用于目标平台的eSDK套装<br>包packages：构建系统的输出，用来创建最终的镜像<br>Extensible Software Development Kit(ESDK)：一个自定义的SDK，应用开发者可以用来将他们的库和代码改动写入镜像，为其他应用开发者提供代码<br>镜像image：加载到设备上的Linux发行版本（操作系统）的二进制形式<br>配置文件:<br>包含全局定义变量，用户定义变量和硬件配置信息。配置文件告诉构建系统需要构建什么，什么需要放入镜像，以支持一个特定平台。后缀为.conf的文件，定义指示构建过程的各种变量值。其中包括：machine配置选项、distribution配置选项、compiler优化选项、通用配置选项和用户配置选项，该类文件只对变量进行赋值，主配置文件为conf&#x2F;local.conf文件。<br>第一步Poky就会从local.conf开始，一路向下，一级一级配置，直到配置到和rootfs有关的那一堆.bb配方文件，最终形成完整完全的配方；<br>然后获取配方需要的资源，比如各种软件包，比如kernel的源码；<br>最后把所有的资源编译出我们需要的镜像。<br>类classes：<br>后缀为.bbclass的文件，包含元数据文件之间的共享数据。通常bitbake&#x2F;class&#x2F;目录下面包含一个base.bbclass，会自动被工程中所有的recipe和class所包含(include、require、inherit)。base.bbclass包含了基本任务的定义，如代码获取、解包、配置(默认为空)、编译(基于任何当前支持的makefile)、安装和打包(两项默认为空)。这些基本任务可以被继承的class或recipe所重写&#x2F;扩展。<br>配方Recipe:<br>后缀为.bb的文件<br>有关软件包的描述性信息（作者，主页，许可证等）<br>现有依赖关系（构建和运行时依赖关系）<br>源代码所在的位置以及如何获取它<br>源代码是否需要任何补丁，在哪里可以找到它们以及如何应用它们<br>如何配置和编译源代码<br>如何将生成的工件组装到一个或多个可安装的程序包中<br>在目标计算机上的哪个位置安装软件包或创建的软件包<br>配方append：<br>后缀为.bbappend的文件，实现对recipe文件的重写&#x2F;扩展。.bbappend文件总是与一个现存的.bb文件(同名)相对应。如：当不同的machine layer对GUI layer进行引用时，可以使用与GUI layer中同名的.bbappend文件对GUI layer的功能进行不同的定制，而不需要去修改原GUI layer中的内容。<br>层Layer:<br>相关Recipe的集合。Layer允许你将元数据（metadata）集合在一起，自定义你的构建。有时候你的构建是可以支持多种不同架构的，那么这种数据，可以通过Layer方式将它们独立出来。将不同的目标实现隔离，实现功能模块化。例如构建适用于两种不同machine的img，可以将两种machine的配置分别置于不同的layer，使得在构建过程中不会相互影响。再比如，一个基本功能的实现也可以设定为单独一个layer，如GUI layer，可以被当作模块被任何其他layer使用。<br>构建系统 - “Bitbake”:<br>调度表和执行引擎，用来解析指令（recipe）和配置数据。然后它创建依赖树，安排编译，调度编译，最后执行定制化Linux镜像&#x2F;发行版本的构建。BitBake是类似Make的一个构建工具。BitBake recipe指定一个特定包是如何被构建的，包括所有包的依赖，源代码路径，配置，编译，构建，安装，和移除指令。Recipe也在标准变量中存储包的元数据。相关Recipe形成一个Layer。构建过程中，追踪依赖，执行编译或交叉编译。作为交叉构建的第一部，矿界首先创建适用于目标平台的eSDK套装。</p>]]></content>
    
    
    <categories>
      
      <category>Yocto</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SELinux简介</title>
    <link href="/2025/05/13/SELinux%E7%AE%80%E4%BB%8B/"/>
    <url>/2025/05/13/SELinux%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-SELinux简介"><a href="#1-SELinux简介" class="headerlink" title="1 SELinux简介"></a>1 SELinux简介</h2><p><font color = black><strong>SELinux(Security-Enhanced Linux)</strong></font>是NSA对于强制访问控制的实现，是Linux历史上最杰出的新安全子系统，主要作用是最大限度的减少系统中服务进程可访问的资源，使用安全上下文实现，如果进程和需要访问的资源的安全上下文不匹配，那么是无法成功访问资源的。<br>SELinux是一种基于 域-类型 模型（domain-type）的强制访问控制（MAC）安全系统，它由NSA编写并设计成内核模块包含到内核中，相应的某些安全相关的应用也被打了SELinux的补丁，最后还有一个相应的安全策略。SELinux 能够执行广泛的安全目标，从简单的沙盒应用程序到锁定面向网络的守护程序，以及将用户限制为仅使用他们工作所需的资源。任何程序对其资源享有完全的控制权。假设某个程序打算把含有潜在重要信息的文件扔到&#x2F;tmp目录下，那么在DAC情况下没人能阻止他。SELinux提供了比传统的UNIX权限更好的访问控制<br>**强制访问控制(mandatory access control)**：缩写MAC，在计算机安全领域指由操作系统约束的访问控制，目标是限制主体或发起者访问或对对象或目标执行某种操作的能力<br>SELinux的作用：</p><ol><li>如果启用 SELinux，则策略定义允许对资源的访问和操作（例如读、写）（即 SELinux 停止所有访问，除非策略允许）。这就是为什么 SELinux 被称为“强制访问控制”（MAC）系统的原因。</li><li>针对已定义的安全策略或要求进行策略设计、实施和测试很重要，否则可能会出现“错误的安全感”。</li><li>SELinux 可以将应用程序限制在自己的“域”内，并允许它拥有完成其工作所需的最低权限。如果应用程序需要访问网络或其他应用程序（或它们的数据），那么（作为安全策略设计的一部分），需要授予这种访问权限（因此至少知道哪些交互是允许的，哪些是不允许的——一个好的安全目标）。</li><li>如果应用程序“做某事”是政策不允许的（有意或无意），那么 SELinux 将停止这些操作。</li><li>如果一个应用程序在政策允许的情况下“做某事”，那么 SELinux 可能包含任何有意或无意造成的损害。例如，如果允许应用程序删除其所有数据文件或数据库条目，并且错误、病毒或恶意用户获得这些特权，那么它也可以这样做，但好消息是，如果策略“受限”应用程序和数据，所有其他数据应该仍然存在。</li><li>用户登录会话可以限制在他们自己的域中。这允许他们运行的客户只获得他们需要的特权（例如管理员用户、销售人员用户、人力资源人员用户等）。这将再次限制&#x2F;限制数据的任何损坏或泄漏。</li><li>一些应用程序（例如 X-Windows）很难限制，因为它们通常被设计为可以完全访问所有资源。SELinux 通常可以通过提供沙盒服务来克服这些问题。</li><li>SELinux 不会阻止内存泄漏或缓冲区溢出（因为它不是为此而设计的），但是它可能包含可能造成的损害。</li><li>SELinux 不会阻止所有病毒&#x2F;恶意软件进入系统（因为它们可以通过多种方式引入（包括由合法用户引入），但它应该限制它们造成的损害或泄漏。</li><li>SELinux 不会阻止内核漏洞，但是它可能会限制它们的影响。</li><li>如果用户具有相关权限，使用诸如<strong>audit2allow</strong> (1)之类的工具很容易将新规则添加到 SELinux 策略中，但是请注意，这可能会开始打开漏洞，因此请检查真正需要哪些规则。</li><li>最后，SELinux 无法阻止安全策略允许的任何事情，因此良好的设计很重要<br><strong>基础概念</strong></li></ol><ul><li><p>主体：通常是进程或者线程</p></li><li><p>对象：文件，目录，TCP&#x2F;UDP端口，共享内存段，I&#x2F;O设备</p></li><li><p>DAC：Discreationary Access Control 自主访问控制。基于用户表示的访问控制，例如一个文件，文件所有者，同组用户，其他组用户</p></li><li><p>MAC：同上，提供了一个灵活的MAC,类型强制TE</p><ul><li>类型强制TE：Type Enforcement SELinux策略大部分内容都是由多条类型强制规则构成的，这些规则控制被允许的使用权，大多数默认转换标志，审核，以及固定部分的检查。一个定义良好、严格的TE策略可能包括上千个TE规则，TE规则表达了所有由内核暴露出的允许对资源的访问权，这意味着每个进程对每个资源的访问尝试都必须至少要有一条被允许的TE规则</li></ul></li><li><p>安全上下文：传统Linux，一切皆文件，由用户，组，权限控制访问。SELinux中，一切皆对象(object)，由存放在inode的扩展属性域的安全元素所控制其访问，所有文件和端口资源和进程都具备安全标签，即安全上下文(security context)，其组成如下。<font color = green>使用方法：ls -Z(文件)，ps -Z(进程)，id -Z(用户)</font>。</p><ul><li><p>用户 user：指示登录系统的用户类型</p><ul><li><p>unconfined_u：不受限的用户</p></li><li><p>system_u：系统用户</p></li></ul></li><li><p>角色 role：定义文件，进程和用户的用途；文件：object_r、进程和用户：system_r。RBAC(role based access control)机制：基于角色的访问控制，对操作系统的各种权限不是直接授予具体的用户，而是在用户集合和权限集合之间建立一个角色集合，每一个角色对应一组相应的权限，一旦用户被分配了适当的角色后，该用户就拥有了此角色的所有操作权限，这样做的好处是，不必在每次创建用户时都进行分配权限的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，这样将简化用户的权限管理，减少系统的开销。</p></li><li><p>类型标识符 type：指定数据类型，规则中定义何种进程类型访问何种文件Target策略基于type实现，多服务公用：public_content_t。文件资源中是类型，主体进程中是域</p></li><li><p>sensitivity 灵敏度：限制访问的需要，由组织定义的分层安全级别，如unclassified，secret，top。一个对象有且只要一个sensitivity，分0-15级，s0最低，target策略默认为s0</p></li><li><p>categories 类别：用于对特定组织划分不分层的分类，如FBI，NSA secret，一个对象可以有多个category，c0-c1023共有1024个分类，Target策略不适用category</p></li></ul></li><li><p>安全级别</p><ul><li><p>H MLS(Multi-Level Security) 多级安全:防止泄密类似情况</p></li><li><p>I MCS(Multi-Category Security) 多类别安全</p></li></ul></li><li><p>域：进程的类型通常被称为一个域<br><strong>主体和对象</strong>各自具有一组安全属性。每当主体尝试访问对象时，都会由操作系统内核强制施行授权规则——检查安全属性并决定是否可进行访问。任何主体对任何对象的任何操作都将根据一组授权规则（也称策略）进行测试，决定操作是否允许。在数据库管理系统中也存在访问控制机制，因而也可以应用强制访问控制；在此环境下，对象为表、视图、过程等</p></li></ul><h2 id="2-SELinux相关知识"><a href="#2-SELinux相关知识" class="headerlink" title="2 SELinux相关知识"></a>2 SELinux相关知识</h2><p><strong>SELinux的策略</strong><br>SELinux的安全策略为refpolicy(reference policy)策略</p><ul><li><p>strict(严格的)：对每个进程都受到SELinux的控制</p></li><li><p>targeted(有针对性的)：用来保护常见的网络服务，仅仅是有限的进程受到SELinux控制，只监控容易被入侵的进程，rhel4只保护13个服务，rhel5保护88个服务</p><ul><li>rhel是Red Hat Enterprise Linux，即Red Hat公司的Linux操作系统，专门为企业所设计</li></ul></li><li><p>minimum：修改过的targeted，只对选择的网络服务</p></li><li><p>mls：提供mls(多级安全保护)机制的安全性<br>ps：minimum和mls稳定性不足，未加以应用，strict不再使用，默认为targeted，但是targeted策略中开启了mls策略，如果主体和客体的安全级别相同，那么mls策略是相当于关闭的<br><strong>SELinux的工作模式</strong></p></li><li><p>Enforcing：强制模式，在这种模式下，SELinux被启用，并强制执行所有的安全策略规则</p></li><li><p>Permissive：宽容模式，在这种模式下，SELinux 被启用，但安全策略规则并没有被强制执行。当安全策略规则应该拒绝访问时，访问仍然被允许。然而，此时会向日志文件发送一条消息，表示该访问应该被拒绝，应用场景如下：</p><ul><li><p>审核当前的SELinux策略规则：</p><ul><li><p>测试新应用程序，看看将 SELinux 策略规则应用到这些程序时会有什么效果</p></li><li><p>解决某一特定服务或应用程序在 SELinux 下不再正常工作的故障</p></li></ul></li></ul></li><li><p>Disabled：关闭模式，在这种模式下，SELinux 被关闭，默认的 DAC 访问控制方式被使用。对于那些不需要增强安全性的环境来说，该模式是非常有用的，要将SELinux工作模式设置为Disabled，需要修改SELinux配置文件，然后重启系统<br><strong>SELinux访问控制策略规则</strong><br>SELinux遵循权限最小原则，所有访问都必须明确授权。策略规则规定了哪些执行主体可以访问的目标，是最基本最重要的策略<br>Allow 规则由四部分组成：<br>源类型(Source type(s)) 通常是尝试访问进程的域类型<br>目标类型(Target type(s))  被进程访问的客体的类型<br>客体类别(Object class(es))  指定允许访问的客体的类型 如file,dir,socket等<br>许可(Pemission(s)) 象征目标类型允许源类型访问客体类型的访问种类<br>格式：<br>rule_name source_type target_type : class perm_set<br>示例：<br>allow appdomain  shell_exec:     file   {  open read  getattr  };</p></li></ul><h2 id="3-SELinux架构"><a href="#3-SELinux架构" class="headerlink" title="3 SELinux架构"></a>3 SELinux架构</h2><p>SELinux 原来是作为一个内核补丁实现的，现在已经将 Linux 安全模块(LSM)重新实现为一个安全模块。嵌入到标准 Linux 中的方式是 LSM 提供一套钩子函数 (hook)，MAC 安全策略检查在这些钩子函数中实现。钩子函数通常放在标准 Linux 检查后、内核调用访问真实资源前调用。系统调用进入内核后，会做常规的错误检查 ( 如参数有效性等 )，然后是标准 Linux 的 DAC 检查。MAC 在这些检查都通过之后才会生效。所以，在 SELinux 中，DAC 和 MAC 同时起作用，两者并行而不悖</p><ul><li><p>LSM：Linux Security Modules 是内核安全模块的一套框架，一般用来做MAC控制。LSM建立在一系列的钩子函数的基础上，且必须编译进内核。SELinux是基于LSM实现的</p><ul><li><p>在内核安全相关的关键路径上插入了Hook点</p><p>内核安全相关的关键对象有：task_struct(任务和进程)、linux_binprm(程序)、super_block(文件系统)、inode(管道、文件或者 socket套接字)、file(打开的文件)、sk_buff(网络缓冲区)、net_device(网络设备)、ker_ipc_perm(Semaphore消息，共享内存段，消息队列)、msg_msg(单个消息）</p></li><li><p>LSM的hook点用途</p><p>流程：</p><ul><li><p>先通过原有的内部接口进行功能性的错误检查</p></li><li><p>然后进行自主访问控制DAC检查</p></li><li><p>调用LSM的hook函数</p></li></ul></li></ul></li><li><p>hook：钩子函数 在一定条件下才会执行的函数，将自己实现的函数挂载到挂载点上</p><ul><li><p>hook函数：就是我们自己实现的函数，函数类型与挂载点匹配(返回值，参数类型)</p></li><li><p>挂载：就是hook或者注册，使得hook函数对目标可用</p></li><li><p>目标挂载点：挂载hook函数的地方(在这个目标点实现自己的功能)</p></li></ul></li></ul><p>SELinux的访问控制流程<br>SELinux是作为LSM模块载入内核的</p><ul><li><p>进程通过系统调用访问资源时，进入Kernel后，先做基本的检测，如果异常直接返回</p></li><li><p>Linux Kernel DAC审查，有异常直接返回</p></li><li><p>调用Linux Kernel Modules的相关hooks，对接到SELinux的hooks，进而进行MAC验证，如果异常直接返回</p></li><li><p>访问真正的资源</p></li><li><p>返回用户态，将结果反馈<br><strong>SELinux整体架构</strong></p></li><li><p>SElinux安全实现中，安全服务器嵌入在内核中，策略通过 libselinux 库中包含的一系列函数从用户空间加载</p><p>对象管理器和AVC驻留</p><ul><li><p>内核空间：对象管理用于内核服务，例如文件，目录，套接字等。通过LSM框架提供到SELinux子系统的钩子。SELinux 内核 AVC 服务用于缓存安全服务器对基于内核的对象管理器的响应，从而在将来询问相同的请求时加快访问决策</p></li><li><p>用户空间：这些对象管理器随需要支持 MAC 的应用程序或服务一起提供，被称为“SELinux 感知”应用程序或服务 。OM 使用 SELinux 库 (libselinux) 中内置的 AVC 服务，但如果需要，它们可以提供自己的 AVC 或根本不使用 AVC</p></li></ul></li><li><p>SELinux安全策略和配置文件包含在&#x2F;etc&#x2F;selinux目录中。此目录包含主 SELinux 配置文件 ( &#x2F;etc&#x2F;selinux&#x2F;config )，其中包含要加载的策略名称（通过SELINUXTYPE条目）和加载时策略的初始执行模式<a href="http://selinuxproject.org/page/NB_CoreComponents#cite_note-ftn1-1">[1]</a>（通过SELINUX入口）。&#x2F;etc&#x2F;selinux&#x2F;<SELINUXTYPE>目录包含可以与其配置文件一起激活的策略</p></li><li><p>SELinux 支持“模块化策略”，这意味着策略不必是一个大型源策略，而是可以从模块构建。模块化策略由包含强制性信息（例如对象类、权限等）的基本策略和零个或多个策略模块组成，其中每个模块通常都支持特定的应用程序或服务。这些模块被编译、链接并保存在“策略存储”中，在那里它们可以构建成二进制格式，然后加载到安全服务器中。二进制策略位于&#x2F;etc&#x2F; selinux&#x2F;targeted&#x2F;policy&#x2F;policy.29</p></li><li><p>策略源：Reference Policy Headers Reference Policy Source Custome Policy Source<br>简要介绍构成核心SELinux基础架构的主要组件。</p></li></ul><table><thead><tr><th><strong>术语</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>Access Vector(AV) 访问向量</strong></td><td>表示一组权限（如打开、读取、写入）的位映射。</td></tr><tr><td><strong>Access Vector Cache（AVC）访问向量缓存</strong></td><td>存储由SELinux安全服务器做出的访问决策以供对象管理器后续使用的组件。这允许检索之前的决策，而无需重新计算开销。在核心SELinux服务中，有两个访问向量缓存：1. 代表基于内核的对象管理器缓存安全服务器的决策的一个内核值 2. 内置于libselinux中的用户空间AVC，用于在SELinux感知应用程序使用avc_open（3）与avc_has_perf（3）或avc_has_perl_noaudit（3）函数调用时缓存决策。这将节省第一次决策后的内核调用。</td></tr><tr><td><strong>Domain 域</strong></td><td>对于SELinux，这包括一个或多个与安全上下文的类型组件相关联的进程。策略中声明的类型实施规则描述了域将如何与对象交互（请参阅“对象类”）。</td></tr><tr><td><strong>Linux Security Module（LSM）</strong></td><td>提供与内核组件（例如磁盘和网络服务）挂钩的框架，安全模块（例如SELinux和SMACK）可以使用该框架执行访问控制检查。目前只能加载一个LSM模块，但正在进行堆叠多个模块的工作）。</td></tr><tr><td><strong>Mandatory Access Control</strong></td><td>一种由系统强制的访问控制机制。这可以通过“固执地”操作系统和应用（对某些人有利的糟糕的过去）或通过符合策略的策略来实现。基于策略的MAC的示例包括SELinux和SMACK。</td></tr><tr><td><strong>Multi-Level Security (MLS)</strong></td><td>基于用于机密性的贝尔-La&amp;Padula模型（BLP），例如，在“机密性”级别运行的进程可以在当前级别读&#x2F;写，但只能读&#x2F;写级别。尽管仍以这种方式使用，但它更常用于应用分离，使用多类别安全变量。</td></tr><tr><td><strong>Object Class</strong></td><td>描述资源，如文件、插槽或服务。每个“类”都有与之相关联的相关权限，例如读取、写入或导出。这允许其对象管理器对实例化对象强制访问。</td></tr><tr><td><strong>Object Manager</strong></td><td>负责标记、管理（例如创建、访问、销毁）和强制执行其控制对象的用户空间和内核组件。对象管理器根据源和目标</td></tr><tr><td><strong>Policy</strong></td><td>确定访问权限的一组规则。在SELinux中，这些规则通常使用m4（1）宏支持（例如参考策略）或新的CIL语言以内核策略语言编写。然后将该策略编译为二进制，加载到安全服务器的格式。</td></tr><tr><td><strong>Role Based Access Control</strong></td><td>SELinux用户关联到一个或多个角色，然后每个角色可能关联到一个或多个域类型。</td></tr><tr><td><strong>Security Server</strong></td><td>Linux内核中的一个子系统，代表SELinux感知应用和对象管理器做出访问决策并基于策略计算安全上下文。安全服务器不会强制实施决策，它只是说明是否根据策略允许操作。强制执行决策是SELinux感知应用程序或对象管理器的职责。</td></tr><tr><td><strong>Security Context</strong></td><td>SELinux Security Context是由以下必需组件组成的可变长度字符串：user，role，type和可选的【，range】组件。通常缩写为“context”，有时称为“a”“label”。</td></tr><tr><td><strong>Security Identifier (SID)</strong></td><td>SID是由表示安全上下文的内核Security Server和userspace AVC映射的唯一不透明整数值。内核安全服务器生成的SID是u32值，通过Linux安全模块挂钩传递到内核对象管理器或从内核对象管理器传递。</td></tr><tr><td><strong>Type Enforcement</strong></td><td>SELinux使用特定类型强制（TE）样式来实施强制访问控制。在这种情况下，所有主体和对象都有与之相关联的类型标识符，然后可以使用该标识符来强制执行策略所规定的规则。</td></tr><tr><td><strong>Reference Policy Headers or Reference Policy Source or Custom Policy Source</strong></td><td>Reference Policy Headers：在本地构建策略模块；Reference Policy Source：引用策略源；Custom Policy Source：自定义策略源</td></tr><tr><td><strong>checkmodule</strong></td><td>检查模块，策略模块编译器。将上面的源进行编译，检查安全策略模块并将其编译为二进制表示的程序。产生Policy object file</td></tr><tr><td><strong>semodule_package</strong></td><td>将策略模块和配置文件打包。生成policy file</td></tr><tr><td><strong>semodule</strong></td><td>通过安装、加载、更新、删除模块及其配套的配置文件来管理策略库。并构建二进制策略文件。</td></tr><tr><td><strong>semanage</strong></td><td>配置登录，用户，端口的策略元素</td></tr><tr><td><strong>Userspace Object Managers</strong></td><td>用户空间对象管理器</td></tr><tr><td><strong>Linux commands</strong></td><td>修改支持SELinux的命令，ls,ps,pam</td></tr><tr><td><strong>policycoreutils</strong></td><td>策略核心工具，SELinux的工具，secon，audit2allow，system-config-selinux</td></tr><tr><td><strong>File Labeling Utilities</strong></td><td>文件标签实用工具，初始化或更新文件安全上下文，setfiles，restorecon</td></tr><tr><td><strong>libselinux</strong></td><td>SELinux的共享库，提供了安全策略，xattr文件属性(文件系统的扩展属性)</td></tr><tr><td><strong>SELinux Configuration Files</strong></td><td>配置文件</td></tr><tr><td><strong>SELinux Policy</strong></td><td>Policy Store：策略存储 Active Policy：生效的策略</td></tr></tbody></table><p><strong>SELinux核心组件</strong></p><ul><li><p>主体请求访问</p></li><li><p>对象管理器 知道它管理哪些对象，查询该请求是否允许，然后强制执行安全策略决策</p></li><li><p>进入AVC(存储安全服务器的决策信息)中进行查询</p><ul><li><p>如果缓存中有相应的允许请求的决策信息，则返回结果到对象管理器</p></li><li><p>如果缓存中没有相应的允许请求的决策信息，则询问安全服务器</p></li></ul></li><li><p>安全服务器中包含安全策略，当缓存中没有相应的允许请求的决策信息而对安全服务器进行询问的时候，安全服务器会基于安全策略进行决策，将结果添加到缓存，再由缓存返回结果给对象管理器</p></li></ul><p><strong>规则如何生效</strong></p><table><thead><tr><th>术语</th><th>描述</th></tr></thead><tbody><tr><td><strong>Kernel Service</strong></td><td>内核资源，包括文件，套接字和内存。需要有访问决策才能对其进行管理</td></tr><tr><td><strong>SELInux Security Module</strong></td><td>SElinux访问决策和内核资源的主要接口，担任资源对象管理器</td></tr><tr><td><strong>NetLink Service</strong></td><td>通过libselinux管理资源的策略来更新通知</td></tr><tr><td><strong>Conditional AV table</strong></td><td>条件访问向量表，支持布尔语句类型，保存条目</td></tr><tr><td><strong>Constraints Table</strong></td><td>约束表</td></tr><tr><td><strong>AV table</strong></td><td>访问向量表</td></tr><tr><td><strong>SID &amp; Context Tables</strong></td><td>存SID和上下文的表</td></tr></tbody></table><h2 id="4-SELinux配置文件"><a href="#4-SELinux配置文件" class="headerlink" title="4 SELinux配置文件"></a>4 SELinux配置文件</h2><p><strong>全局配置文件</strong></p><p>影响活动策略及支持SELinux感知应用程序、实时程序或命令</p><ul><li><p>&#x2F;etc&#x2F;selinux&#x2F;config：定义要激活的策略及其执行模式，如果该文件丢失，那么不会加载SELinux策略</p></li><li><p>&#x2F;etc&#x2F;selinux&#x2F;semanage.conf：SELinux 策略配置子系统将其用于模块化或 CIL 策略</p></li><li><p>&#x2F;etc&#x2F;selinux&#x2F;restorecond.conf and restorecond-user.conf：restorecond.conf 文件包含可能由具有不正确安全上下文的应用程序创建的文件列表。<strong>restorecond</strong> (8) 守护进程将监视它们的创建，并自动将其安全上下文更正为活动策略文件上下文配置文件（位于 &#x2F;etc&#x2F;selinux&#x2F;<policy_name>&#x2F;contexts&#x2F;files 目录中）指定的安全上下文</p></li><li><p>&#x2F;etc&#x2F;selinux&#x2F;newrole_pam.conf：使用可选的newrole_pam.conf文件并将应用程序或命令映射到<strong>PAM</strong> (8)配置文件。每行包含可执行文件名，后跟&#x2F;etc&#x2F;pam.d中存在的pam配置文件的名称</p></li><li><p>&#x2F;etc&#x2F;sestatus.conf： 文件列出在使用 -v 标志 (sestatus -v) 时应显示其安全上下文的文件和进程</p></li><li><p>&#x2F;etc&#x2F;security&#x2F;sepermit.conf：pam_sepermit.so模块使用<strong>sepermit.conf</strong> (5) 文件来允许或拒绝用户登录，具体取决于 SELinux 是否执行策略</p></li></ul><p><strong>策略存储配置文件</strong></p><p>私有的，由semanage和semodule命令管理，用于构建大部分策略配置文件</p><ul><li><p>modules&#x2F;active&#x2F;base.pp：pam_sepermit.so模块使用<strong>sepermit.conf</strong> (5) 文件来允许或拒绝用户登录，具体取决于 SELinux 是否执行策略</p></li><li><p>modules&#x2F;active&#x2F;base.linked：这仅在 save-linked 设置为TRUE时出现，如<a href="http://selinuxproject.org/page/GlobalConfigurationFiles#.2Fetc.2Fselinux.2Fsemanage.conf_File" title="全局配置文件">&#x2F;etc&#x2F;selinux&#x2F;semanage.conf</a>部分所述。它包含已使用<strong>semodule_link</strong> (8)命令链接的模块</p></li><li><p>modules&#x2F;active&#x2F;commit_num：这是 libsemanage 用于管理存储更新的二进制文件。该格式与政策构建无关</p></li><li><p>modules&#x2F;active&#x2F;file_contexts.template：这包含从<a href="http://selinuxproject.org/page/PolicyStoreConfigurationFiles#modules.2Factive.2Fbase.pp">base.pp</a>和<a href="http://selinuxproject.org/page/PolicyStoreConfigurationFiles#modules.2Factive.2Fmodules_Directory_Contents">modules&#x2F;active&#x2F;modules</a>目录中的可加载模块中提取的所有模块“标签策略文件”条目（例如 <module_name>.fc 文件）的副本</p></li><li><p>modules&#x2F;active&#x2F;file_contexts：该文件成为策略<a href="http://selinuxproject.org/page/PolicyConfigurationFiles#contexts.2Ffiles.2Ffile_contexts" title="策略配置文件">contexts&#x2F;files&#x2F;file_contexts文件，并由</a><a href="http://selinuxproject.org/page/PolicyStoreConfigurationFiles#modules.2Factive.2Ffile_contexts.template">modules&#x2F;active&#x2F;file_contexts.template</a>文件中的条目构建，文件标记实用程序使用它来确保根据策略标记文件和目录</p></li><li><p>modules&#x2F;active&#x2F;homedir_template：</p></li><li><p>modules&#x2F;active&#x2F;file_contexts.homedirs：在构建策略时，此文件将成为策略<a href="http://selinuxproject.org/page/PolicyConfigurationFiles#contexts.2Ffiles.2Ffile_contexts.homedirs" title="策略配置文件">contexts&#x2F;files&#x2F;file_contexts.homedirs文件，如</a><a href="http://selinuxproject.org/~rhaines/NB4-diagrams/25-file_contexts.png">文件上下文配置文件</a>图中所示。然后文件标记实用程序使用它来确保根据策略标记用户主目录区域</p></li><li><p>modules&#x2F;active&#x2F;netfilter_contexts &amp; netfilter.local：</p></li><li><p>modules&#x2F;active&#x2F;policy.kern：这是由<strong>semanage</strong> (8) 或<strong>semodule</strong> (8) 命令（取决于配置操作）构建的二进制策略文件，然后成为要加载到内核中的二进制策略</p></li><li><p>modules&#x2F;active&#x2F;seusers.final and seusers：seusers.final 文件将 GNU &#x2F; Linux 用户映射到 SELinux 用户，并成为<a href="http://selinuxproject.org/page/PolicyConfigurationFiles#seusers" title="策略配置文件">seusers部分中讨论的策略 seusers</a> <a href="http://selinuxproject.org/page/PolicyStoreConfigurationFiles#cite_note-ftn36-3">[3]</a>文件</p></li><li><p>modules&#x2F;active&#x2F;users_extra, users_extra.local and users.local：users_extra 和 users_extra.local 文件用于将前缀映射到用户主目录，如<a href="http://selinuxproject.org/page/PolicyStoreConfigurationFiles#modules.2Factive.2Ffile_contexts.template">modules&#x2F;active&#x2F;file_contexts.template</a>文件部分所述，用于替换 ROLE 关键字。前缀链接到 SELinux 用户 ID，应该反映用户角色</p></li><li><p>modules&#x2F;active&#x2F;booleans.local：该文件由semanage boolean命令创建和更新，并根据请求保存布尔值</p></li><li><p>mod</p></li><li><p>modules&#x2F;active&#x2F;file_contexts.local：该文件由 semanage fcontext 命令创建和更新。它用于保存核心策略未交付的文件和目录的文件上下文信息（即它们未在基本模块和可加载模块中交付的任何 *.fc 文件中定义）。</p><p>semanage 命令会将信息添加到策略存储 file_contexts.local 文件中，然后将此文件复制到 .&#x2F;contexts&#x2F;files&#x2F;file_contexts.local 文件中，运行文件上下文实用程序时将使用该文件</p></li><li><p>modules&#x2F;active&#x2F;interfaces.local：该文件由 semanage interface 命令创建和更新，以保存核心策略未传递的网络接口信息（即它们未在 base.conf 文件中定义）</p></li><li><p>modules&#x2F;active&#x2F;nodes.local File：该文件由 semanage node 命令创建和更新，以保存核心策略未传递的网络地址信息（即它们未在 base.conf 文件中定义）</p></li><li><p>modules&#x2F;active&#x2F;ports.local File：该文件由 semanage port 命令创建和更新，以保存核心策略未传递的网络端口信息（即它们未在 base.conf 文件中定义）</p></li><li><p>modules&#x2F;active&#x2F;preserve_tunables：仅当策略构建指定应保留可调参数时，此文件才会存在，如果是这样，它们将由策略构建过程转换为布尔值</p></li><li><p>modules&#x2F;active&#x2F;disable_dontaudit：仅当策略构建指定应禁用 <a href="http://selinuxproject.org/page/AVCRules#dontaudit" title="AVCR 规则">dontaudit</a>规则时，此文件才会存在</p></li><li><p>modules&#x2F;active&#x2F;modules Directory Contents：此目录包含可加载模块（<module_name>.pp 或禁用时<module_name>.pp.disabled），这些模块已由 semodule_package 命令构建并由 semodule 或semanage module -a命令放置在存储区中</p></li></ul><p><strong>策略配置文件</strong></p><ul><li>seusers：<strong>seusers</strong> (5)文件由登录程序（通常通过libselinux库）使用，并将 GNU &#x2F; Linux 用户（在user &#x2F; passwd文件中定义）映射到 SELinux 用户（在策略中定义）</li><li>booleans and booleans.local：<strong>通常，如果semanage</strong> (8)用于管理布尔值，则这些<strong>布尔值</strong>(5)文件不存在（请参阅 modules&#x2F;active&#x2F;booleans.local 文件部分）。但是，如果没有使用semanage或者有一个支持 SELinux 的应用程序使用下面列出的libselinux函数，那么这些文件可能存在（它们也可能存在于较旧的参考策略中）</li><li>booleans.subs_dist：booleans.subs_dist文件（如果存在）将允许将新的布尔名称分配给活动策略中的名称。添加此文件是因为许多较旧的布尔值以“允许”开头，这使得很难确定它们做了什么</li><li>setrans.conf：setrans.conf (8)文件由<strong>mcstransd</strong> (8) 守护程序（在 mcstrans rpm 中可用）使用。该守护程序使 SELinux 感知应用程序能够将 MCS&#x2F;MLS 内部策略级别转换为用户友好的标签</li><li>secolor.conf：当SELinux 颜色感知应用程序显示信息时， <strong>secolor.conf</strong> (5) 文件控制与上下文组件相关联的颜色（目前没有，尽管在libselinux&#x2F;examples下的 Notebook 源 tarball 中有两个示例目录）</li><li>policy&#x2F;policy[ver]：这是加载到内核中以强制执行策略的二进制策略文件，由 checkpolicy 或 semodule 构建</li><li>contexts&#x2F;customizable_types：Customized_types (5) 文件包含不会被<strong>setfiles</strong> (8) 或<strong>restorecon</strong> (8) 命令重新标记的类型列表。这些命令在重新标记之前检查此文件并排除列表中的那些，除非使用 -F 标志</li><li>contexts&#x2F;default_contexts：需要为用户进程（通常是登录应用程序）设置安全上下文的 SELinux 感知应用程序使用 default_contexts (5) 文件</li><li>contexts&#x2F;dbus_contexts：该文件用于 dbus 消息传递服务守护进程（IPC 的一种形式），许多 GNU &#x2F; Linux 应用程序（例如 GNOME 和 KDE 桌面）使用该守护进程。如果启用了 SELinux，则需要存在此文件才能使这些应用程序正常工作</li><li>contexts&#x2F;default_type：<strong>default_type</strong> (5) 文件允许 SELinux 感知应用程序（例如<strong>newrole</strong> (1)）选择角色的默认类型</li><li>contexts&#x2F;failsafe_context：当登录进程无法确定要使用的默认上下文时，使用<strong>failsafe_context (5)。</strong>然后，文件内容将用于允许管理员访问系统</li><li>contexts&#x2F;initrc_context File：<strong>run_init</strong> (8) 命令使用它来允许系统服务在与 init 相同的安全上下文中启动。其他支持 SELinux 的应用程序也可以出于相同目的使用此文件</li><li>contexts&#x2F;lxc_contexts File：该文件支持在libvirt库中标记 lxc 容器（参见 libvirt 源代码src&#x2F;security&#x2F;security_selinux.c）</li><li>contexts&#x2F;netfilter_contexts：此文件将支持网络数据包的 Netfilter &#x2F; iptable 规则匹配的 Secmark 标记</li><li>contexts&#x2F;removable_context：可<strong>移动</strong>上下文(5) 文件包含一个默认标签，该标签应用于未在<a href="http://selinuxproject.org/page/PolicyConfigurationFiles#contexts.2Ffiles.2Fmedia">上下文&#x2F;文件&#x2F;媒体</a>文件中定义的可移动设备</li><li>contexts&#x2F;securetty_types：<strong>newrole</strong> (1) 命令使用<strong>securetty_types</strong> (5) 文件来查找在更改角色或级别时与tty 设备一起使用的类型</li><li>contexts&#x2F;sepgsql_contexts：该文件包含 SE-PostgreSQL 数据库对象的默认安全上下文，并在<strong>selabel_db</strong> (5)中进行了描述</li><li>contexts&#x2F;systemd_contexts：该文件当前未在 F-20 中使用，但似乎包含文件上下文，供后续版本中通过<strong>systemd</strong> (8)运行的任务使用</li><li>contexts&#x2F;userhelper_context：此文件包含 system-config-* 应用程序从 root 运行时使用的默认安全上下文</li><li>contexts&#x2F;virtual_domain_context：<strong>virtual_domain_context</strong> (5) 文件由虚拟化 API ( libvirt ) 使用，并提供策略中可用的 qemu 域上下文，此文件中可能有两个条目，第二个条目是替代域上下文</li><li>contexts&#x2F;virtual_image_context：<strong>virtual_image_context</strong> (5) 文件由虚拟化 API ( libvirt ) 使用，并提供策略中可用的图像上下文，第一个条目是图像文件上下文，第二个条目是图像内容上下文</li><li>contexts&#x2F;x_contexts：x_contexts (5) 文件<strong>为</strong>X-Windows SELinux 安全扩展提供默认的安全上下文</li><li>contexts&#x2F;files&#x2F;file_contexts：<strong>file_contexts</strong> (5) 文件由semodule <strong>(</strong> 8) 和<strong>semanage</strong> (8) 命令<a href="http://selinuxproject.org/page/PolicyConfigurationFiles#cite_note-ftn39-1">[1]</a>随着策略的更新（添加或删除模块或更新基础）进行管理，因此不应编辑</li><li>contexts&#x2F;files&#x2F;file_contexts.local：该文件由 semanage fcontext 命令添加，如<a href="http://selinuxproject.org/page/PolicyStoreConfigurationFiles#modules.2Factive.2Ffile_contexts.local_File" title="策略存储配置文件">modules&#x2F;active&#x2F;file_contexts.local</a>文件部分所述，以允许正确标记本地定义的文件</li><li>contexts&#x2F;files&#x2F;file_contexts.homedirs：此文件由<strong>semodule</strong> (8) 和<strong>semanage</strong> (8) 命令在策略更新（添加或删除用户和模块或更新基础）时管理，因此不应编辑，它由<strong>genhomedircon</strong> (8) 命令（实际上是由重建策略的 semodule -Bn）生成，用于在用户主目录和文件上设置正确的上下文</li><li>contexts&#x2F;files&#x2F;file_contexts.subs and file_contexts.subs_dist：这些文件允许为libselinux函数<strong>matchpatchcon</strong> (3)和<strong>selabel_lookup</strong> (3)替换文件名（用于本地使用的.subs和用于 GNU&#x2F;Linux 发行版的.subs_dist ） 。<strong>file_contexts</strong> (5) 手册页也描述了这个文件</li><li>contexts&#x2F;files&#x2F;media：<strong>媒体</strong>(5) 文件用于将媒体类型映射到文件上下文。如果在此文件中找不到 media_id，则使用<a href="http://selinuxproject.org/page/PolicyConfigurationFiles#contexts.2Fremoveable_contexts">contexts&#x2F;removable_contexts</a>中的默认上下文</li><li>contexts&#x2F;users&#x2F;[seuser_id]：这些可选文件以其代表的 SELinux 用户命名。<a href="http://selinuxproject.org/page/PolicyConfigurationFiles#contexts.2Fdefault_contexts">每个文件具有与contexts&#x2F;default_contexts</a>文件相同的格式，用于为 SELinux 用户分配正确的上下文（通常在登录期间）</li><li>logins&#x2F;<linuxuser_id>：这些可选文件由支持 SELinux 的登录应用程序（例如 PAM）使用（使用pam_selinux模块）根据 GNU&#x2F;Linux 登录 ID 和服务名称获取 SELinux 用户名和级别</li><li>users&#x2F;local.users：通常，如果使用<strong>semanage</strong> (8)管理用户，则<strong>local.users</strong> (5) 文件不存在，但是如果不使用<strong>semanage</strong>，则该文件可能存在（它也可能存在于较旧的参考或示例策略中）</li></ul><p><strong>策略存储迁移</strong></p><p>升级库后，必须先迁移所有策略存储，然后才能执行任何修改或使用存储的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编译并安装一个用内核语言编写的基本模块和两个模块：</span><br>checkmodule -o base.mod base.conf <br>semodule_package -o base.pp -m base.mod -f base.fc <br>checkmodule -m ext_gateway.conf -o ext_gateway.mod <br>semodule_package -o ext_gateway.pp -m ext_gateway.mod -f gateway.fc <br>checkmodule -m int_gateway.conf -o int_gateway.mod <br>semodule_package -o int_gateway.pp -m int_gateway.mod <br>semodule -s 模块化测试 --priority 100 -i base.pp ext_gateway.pp int_gateway.pp <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译并安装一个用 CIL 编写的更新模块：&gt;</span> <br>semodule -s modules-test --priority 400 -i custom/int_gateway.cil <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示模块的完整列表：</span><br>semodule -s modules -test --list-modules=full <br>400 int_gateway cil<br>100 base pp <br>100 ext_gateway pp <br>100 int_gateway pp <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示模块的标准列表：</span><br>semodule -s modules-test --list-modules=standard <br>base <br>ext_gateway <br>int_gateway<br></code></pre></td></tr></table></figure><p><strong>优先选项</strong></p><p>优先级允许策略存储中存在多个具有相同名称的模块，较高优先级的模块包含在二进制文件中，所有较低优先级的同名模块都将被忽略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">semodule --priority 100 --install 分发/apache.pp <br>semodule --priority 400 --install custom/apache.pp<br></code></pre></td></tr></table></figure><p>两个 apache 模块都作为“apache”安装在策略库中，但最终内核二进制文件中只包含自定义 apache 模块。分发 apache 模块被忽略。–list -modules选项可用于显示这些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示完整的模块列表：</span><br>semodule --list-modules=full <br>400 apache pp <br>100 base pp <br>100 apache pp <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示标准的模块列表：</span><br>semodule --list-modules=standard <br>base <br>apache<br></code></pre></td></tr></table></figure><p><strong>将策略包转换为CIL</strong></p><p>更新的一个组成部分是添加将编译的策略模块（称为策略包或*.pp文件）转换为 CIL 格式的工具。这是通过位于&#x2F;usr&#x2F;libexec&#x2F;selinux&#x2F;hll&#x2F;pp的pp到 CIL 高级语言转换实用程序来实现的</p><p>CIL：通用中间语言，属于通用语言基础架构和.NET框架的低阶的人类可读的编程语言，它是一种代码指令集。CIL可以在任何支持CIL的环境中运行，如果想让一份代码在不同的平台中运行，需要将代码的编译分成两部分</p><ul><li><p>把源代码编译成CIL的预编译过程（其实之后CIL还会被编译成一种位元码(一个程序处理的电脑目标代码)，生成一个CLI Assembly）</p></li><li><p>运行时把CIL（其实是CLI Assembly）编译成本地指令的即时编译过程</p></li></ul><p>CIL是基于堆栈的，运行在虚拟机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat module_name.pp | /usr/libexec/selinux/hll/pp &gt; module_name.cil<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SELinux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/12/hello-world/"/>
    <url>/2025/05/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
